#!/bin/sh

T="docker-emulator"

F="${1:?}"

{ docker build \
         -q \
         -t "${T:?}" \
         - \
         >/dev/null <<"EOF"
FROM debian:buster
## Refs:
## - [apt-get best practices](https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#apt-get).
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip \
 && rm -rf /var/lib/apt/lists/*
pip install sdkmanager==0.3
WORKDIR /workdir
## Refs:
## - https://android.stackexchange.com/questions/9312/how-can-i-verify-the-authenticity-of-an-apk-file-i-downloaded
##   It also has alternative solution using `keytool -printcert`
##   but it is tricky because certificate path is not always at `META-INF/CERT.RSA`.
## - https://developer.android.com/studio/command-line/apksigner
ENTRYPOINT ["sh", "-c", "cat - > \"${1:?}\" && apksigner verify --print-certs -v \"${1:?}\"", "apksigner"]
EOF
} && {
    # shellcheck disable=SC2094
    docker run \
           -i \
           -a stdin \
           -a stdout \
           -a stderr \
           --network none \
           --rm \
           "${T:?}" \
           "$(basename "${F:?}")" \
           < "${F:?}"; }
